//   Copyright 2018 Google Inc. All Rights Reserved.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.google.trillian-examples.proto";
option java_outer_classname = "ShardServiceProto";
option go_package = "github.com/google/trillian-examples/railgun/shard";

package shard;

import "crypto/sigpb/sigpb.proto";

message ShardProvisionRequest {
  // This should contain the signature of the configuration proto.
  sigpb.DigitallySigned config_sig = 1;
  // This should contain a marshalled ShardProto.
  bytes shard_config = 2;
}

message ShardProvisionResponse {
  // This should contain the signature of the configuration proto.
  sigpb.DigitallySigned config_sig = 1;
  // This should contain a marshalled ShardProto. This represents the
  // config that was instated by the shard and may differ from the request.
  // Keys may be redacted and timestamps updated for example.
  bytes provisioned_config = 2;
}

message GetShardConfigRequest {
  // This request is not authenticated as it returns only public data.
}

message GetShardConfigResponse {
  // This should contain the signature of the configuration proto.
  sigpb.DigitallySigned config_sig = 1;
  // This should contain a marshalled ShardProto. This represents the
  // config that was instated by the shard and may differ from the request.
  // Keys may be redacted and timestamps updated for example.
  bytes provisioned_config = 2;
}

service ShardService {
  rpc Provision(ShardProvisionRequest) returns (ShardProvisionResponse) {};
  rpc GetConfig(GetShardConfigRequest) returns(GetShardConfigResponse) {};
}