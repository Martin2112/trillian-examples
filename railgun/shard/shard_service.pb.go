// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shard_service.proto

/*
Package shard is a generated protocol buffer package.

It is generated from these files:
	shard_service.proto

It has these top-level messages:
	ShardProvisionRequest
	ShardProvisionResponse
	GetShardConfigRequest
	GetShardConfigResponse
*/
package shard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import sigpb "github.com/google/trillian/crypto/sigpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShardProvisionRequest struct {
	// This should contain the signature of the configuration proto.
	ConfigSig *sigpb.DigitallySigned `protobuf:"bytes,1,opt,name=config_sig,json=configSig" json:"config_sig,omitempty"`
	// This should contain a marshalled ShardProto.
	ShardConfig []byte `protobuf:"bytes,2,opt,name=shard_config,json=shardConfig,proto3" json:"shard_config,omitempty"`
}

func (m *ShardProvisionRequest) Reset()                    { *m = ShardProvisionRequest{} }
func (m *ShardProvisionRequest) String() string            { return proto.CompactTextString(m) }
func (*ShardProvisionRequest) ProtoMessage()               {}
func (*ShardProvisionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ShardProvisionRequest) GetConfigSig() *sigpb.DigitallySigned {
	if m != nil {
		return m.ConfigSig
	}
	return nil
}

func (m *ShardProvisionRequest) GetShardConfig() []byte {
	if m != nil {
		return m.ShardConfig
	}
	return nil
}

type ShardProvisionResponse struct {
	// This should contain the signature of the configuration proto.
	ConfigSig *sigpb.DigitallySigned `protobuf:"bytes,1,opt,name=config_sig,json=configSig" json:"config_sig,omitempty"`
	// This should contain a marshalled ShardProto. This represents the
	// config that was instated by the shard and may differ from the request.
	// Keys may be redacted and timestamps updated for example.
	ProvisionedConfig []byte `protobuf:"bytes,2,opt,name=provisioned_config,json=provisionedConfig,proto3" json:"provisioned_config,omitempty"`
}

func (m *ShardProvisionResponse) Reset()                    { *m = ShardProvisionResponse{} }
func (m *ShardProvisionResponse) String() string            { return proto.CompactTextString(m) }
func (*ShardProvisionResponse) ProtoMessage()               {}
func (*ShardProvisionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShardProvisionResponse) GetConfigSig() *sigpb.DigitallySigned {
	if m != nil {
		return m.ConfigSig
	}
	return nil
}

func (m *ShardProvisionResponse) GetProvisionedConfig() []byte {
	if m != nil {
		return m.ProvisionedConfig
	}
	return nil
}

type GetShardConfigRequest struct {
}

func (m *GetShardConfigRequest) Reset()                    { *m = GetShardConfigRequest{} }
func (m *GetShardConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetShardConfigRequest) ProtoMessage()               {}
func (*GetShardConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetShardConfigResponse struct {
	// This should contain the signature of the configuration proto.
	ConfigSig *sigpb.DigitallySigned `protobuf:"bytes,1,opt,name=config_sig,json=configSig" json:"config_sig,omitempty"`
	// This should contain a marshalled ShardProto. This represents the
	// config that was instated by the shard and may differ from the request.
	// Keys may be redacted and timestamps updated for example.
	ProvisionedConfig []byte `protobuf:"bytes,2,opt,name=provisioned_config,json=provisionedConfig,proto3" json:"provisioned_config,omitempty"`
}

func (m *GetShardConfigResponse) Reset()                    { *m = GetShardConfigResponse{} }
func (m *GetShardConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetShardConfigResponse) ProtoMessage()               {}
func (*GetShardConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetShardConfigResponse) GetConfigSig() *sigpb.DigitallySigned {
	if m != nil {
		return m.ConfigSig
	}
	return nil
}

func (m *GetShardConfigResponse) GetProvisionedConfig() []byte {
	if m != nil {
		return m.ProvisionedConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*ShardProvisionRequest)(nil), "shard.ShardProvisionRequest")
	proto.RegisterType((*ShardProvisionResponse)(nil), "shard.ShardProvisionResponse")
	proto.RegisterType((*GetShardConfigRequest)(nil), "shard.GetShardConfigRequest")
	proto.RegisterType((*GetShardConfigResponse)(nil), "shard.GetShardConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ShardService service

type ShardServiceClient interface {
	Provision(ctx context.Context, in *ShardProvisionRequest, opts ...grpc.CallOption) (*ShardProvisionResponse, error)
	GetConfig(ctx context.Context, in *GetShardConfigRequest, opts ...grpc.CallOption) (*GetShardConfigResponse, error)
}

type shardServiceClient struct {
	cc *grpc.ClientConn
}

func NewShardServiceClient(cc *grpc.ClientConn) ShardServiceClient {
	return &shardServiceClient{cc}
}

func (c *shardServiceClient) Provision(ctx context.Context, in *ShardProvisionRequest, opts ...grpc.CallOption) (*ShardProvisionResponse, error) {
	out := new(ShardProvisionResponse)
	err := grpc.Invoke(ctx, "/shard.ShardService/Provision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) GetConfig(ctx context.Context, in *GetShardConfigRequest, opts ...grpc.CallOption) (*GetShardConfigResponse, error) {
	out := new(GetShardConfigResponse)
	err := grpc.Invoke(ctx, "/shard.ShardService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShardService service

type ShardServiceServer interface {
	Provision(context.Context, *ShardProvisionRequest) (*ShardProvisionResponse, error)
	GetConfig(context.Context, *GetShardConfigRequest) (*GetShardConfigResponse, error)
}

func RegisterShardServiceServer(s *grpc.Server, srv ShardServiceServer) {
	s.RegisterService(&_ShardService_serviceDesc, srv)
}

func _ShardService_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shard.ShardService/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Provision(ctx, req.(*ShardProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shard.ShardService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).GetConfig(ctx, req.(*GetShardConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shard.ShardService",
	HandlerType: (*ShardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Provision",
			Handler:    _ShardService_Provision_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ShardService_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shard_service.proto",
}

func init() { proto.RegisterFile("shard_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0xc1, 0x6a, 0x02, 0x31,
	0x14, 0x74, 0x0b, 0x2d, 0x18, 0xbd, 0xb8, 0x45, 0x2b, 0xd2, 0x82, 0xdd, 0x93, 0x17, 0x13, 0xaa,
	0xf4, 0x07, 0x6c, 0x41, 0xe8, 0x49, 0xdc, 0x5b, 0x2f, 0xb2, 0xae, 0xaf, 0xf1, 0x41, 0x4c, 0x62,
	0x12, 0xa5, 0x5e, 0xfa, 0x39, 0xfd, 0xce, 0xb2, 0x89, 0x6e, 0x45, 0xf4, 0xd2, 0x43, 0x2f, 0x7b,
	0x98, 0xb7, 0x6f, 0x66, 0xde, 0x64, 0xc8, 0xad, 0x5d, 0x66, 0x66, 0x31, 0xb3, 0x60, 0xb6, 0x98,
	0x03, 0xd5, 0x46, 0x39, 0x15, 0x5f, 0x7b, 0xb0, 0x33, 0xe4, 0xe8, 0x96, 0x9b, 0x39, 0xcd, 0xd5,
	0x8a, 0x71, 0xa5, 0xb8, 0x00, 0xe6, 0x0c, 0x0a, 0x81, 0x99, 0x64, 0xb9, 0xd9, 0x69, 0xa7, 0x98,
	0x45, 0xae, 0xe7, 0xe1, 0x1b, 0x76, 0x93, 0x35, 0x69, 0xa6, 0xc5, 0xf6, 0xc4, 0xa8, 0x2d, 0x5a,
	0x54, 0x72, 0x0a, 0xeb, 0x0d, 0x58, 0x17, 0x3f, 0x13, 0x92, 0x2b, 0xf9, 0x81, 0x7c, 0x66, 0x91,
	0xb7, 0xa3, 0x6e, 0xd4, 0xab, 0x0d, 0x5a, 0x34, 0xac, 0xbe, 0x22, 0x47, 0x97, 0x09, 0xb1, 0x4b,
	0x91, 0x4b, 0x58, 0x4c, 0xab, 0xe1, 0xcf, 0x14, 0x79, 0xfc, 0x48, 0xea, 0xc1, 0x62, 0x80, 0xda,
	0x57, 0xdd, 0xa8, 0x57, 0x9f, 0xd6, 0x3c, 0xf6, 0xe2, 0xa1, 0xe4, 0x8b, 0xb4, 0x4e, 0x25, 0xad,
	0x56, 0xd2, 0xc2, 0x5f, 0x35, 0xfb, 0x24, 0xd6, 0x07, 0x2e, 0x38, 0x51, 0x6e, 0x1c, 0x4d, 0xf6,
	0xfa, 0x77, 0xa4, 0x39, 0x06, 0x97, 0xfe, 0x3a, 0xda, 0x9f, 0x5c, 0x18, 0x3b, 0x1d, 0xfc, 0xa7,
	0xb1, 0xc1, 0x77, 0x44, 0xea, 0x5e, 0x3d, 0x0d, 0xcf, 0x1b, 0xbf, 0x91, 0x6a, 0x19, 0x52, 0x7c,
	0x4f, 0x7d, 0x88, 0xf4, 0xec, 0x73, 0x75, 0x1e, 0x2e, 0x4c, 0xc3, 0x01, 0x49, 0xa5, 0xe0, 0x1a,
	0x83, 0x0b, 0x4a, 0x25, 0xd7, 0xd9, 0x1c, 0x4a, 0xae, 0xf3, 0x61, 0x24, 0x95, 0x91, 0x20, 0x49,
	0xae, 0x56, 0x34, 0x94, 0x8c, 0x1e, 0x4a, 0xd6, 0x87, 0xcf, 0x6c, 0xa5, 0x05, 0xd8, 0x50, 0xad,
	0x51, 0xe3, 0xf8, 0x96, 0x49, 0x01, 0x4d, 0xa2, 0xf7, 0xa7, 0xcb, 0x25, 0x2d, 0xf7, 0x99, 0xc9,
	0x50, 0xf0, 0x8d, 0x64, 0xde, 0xc6, 0xfc, 0xc6, 0xd3, 0x0d, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x55, 0xbb, 0x0b, 0xb6, 0xfc, 0x02, 0x00, 0x00,
}
